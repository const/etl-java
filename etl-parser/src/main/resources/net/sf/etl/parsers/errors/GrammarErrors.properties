#
# Reference ETL Parser for Java
# Copyright (c) 2000-2022 Konstantin Plotnikov
#
# Permission is hereby granted, free of charge, to any person
# obtaining a copy of this software and associated documentation
# files (the "Software"), to deal in the Software without restriction,
# including without limitation the rights to use, copy, modify, merge,
# publish, distribute, sublicense, and/or sell copies of the Software,
# and to permit persons to whom the Software is furnished to do so,
# subject to the following conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
# BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
# ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#
grammar.Grammar.cyclicInclude=\
Cyclic grammar include detected
grammar.Grammar.duplicateContext=\
Duplicate context with name {0}
grammar.GrammarImport.importOfAbstractGrammar=\
Non abstract grammar imports abstract grammar {1} by name {0}
grammar.GrammarImport.includedImportOfAbstractGrammar=\
Non abstract grammar includes import from grammar {2} \
of abstract grammar {1} by name {0}
grammar.Grammar.duplicateImport=\
Duplicate grammar import with local name {0}
grammar.Grammar.duplicateInclude=\
Duplicate grammar include
grammar.Grammar.duplicateNamespaceDeclaration=\
Duplicate namespace declaration for prefix {0}. The prefix had been previously declared with URI {1}.
grammar.Grammar.duplicateDefaultNamespace=\
The default namespace has been already declared for this grammar. It was {0} = {1}.
grammar.Grammar.invalidUriInNamespaceDeclaration=\
Invalid URI in namespace declaration {0} = {1}.
grammar.Grammar.duplicateIncludedImportNames=\
Conflicting imports names for included grammars "{0}", redefine import in this grammar.
grammar.Context.duplicateDefault=\
A context {0} has already declared that it is default.
grammar.Context.abstractDefault=\
An abstract context {0} cannot be default.
grammar.Context.definitionConflict=\
A context has definitions that conflict with each other. Gathered \
look ahead {0}, but new definition has look ahead = {1}.
grammar.Context.ContextInclude.missingContext=\
Referenced context {0} does not exist.
grammar.Context.ContextInclude.cyclicContextInclude=\
Including context {0} would create inclusion cycle.
grammar.Context.ContextInclude.duplicateInclude=\
Duplicate include of context {0}.
grammar.Context.ContextImport.missingGrammarImport=\
The grammar does not have grammar import with local name {0}.
grammar.Context.ContextImport.missingContext=\
Import referencing missing context with name {0}.
grammar.Context.ContextImport.duplicateImportByGrammarInclude=\
Grammar include caused duplicate imports with name {0}.
grammar.Context.ContextImport.duplicateWrappersByGrammarInclude=\
Grammar include caused duplicate wrappers "{1}" and "{2}" for including context {0} .
grammar.Context.ContextImport.duplicateWrappersByContextInclude=\
Context include caused duplicate wrappers "{1}" and "{2}" for including context {0} .
grammar.Context.ContextImport.duplicateImportByContextInclude=\
Context include caused duplicate imports with name {0}.
grammar.Context.ContextImport.missingContextInGrammar=\
Import referencing context with name {0} that is missing in referenced grammar {1}.
grammar.Context.ContextImport.nonAbstractContextImportsAbstractContext=\
Non abstract context import abstract context {2} from grammar {1} \
by local name {0}.
grammar.Context.ContextImport.includedImportsAbstractContext=\
Context {0} includes import {3} from context {2} from grammar {1} that \
references context {5} from grammar {4}.
grammar.Context.Definition.duplicateDefinition=\
Duplicate definition with name {0}.
grammar.Context.Definition.duplicateDefinitionByGrammarInclude=\
Duplicate definitions with name {0} included in this context from parent grammars.
grammar.Context.Definition.duplicateDefinitionByContextInclude=\
Duplicate definitions with name {0} included in this context from parent contexts.
grammar.Context.OperatorDefinition.wrongPrecedenceAssociativity=\
Operator of kind {1} with precedence {0} is defined on the wrong level operator can be on level 0 only and only if it is has associativity "f".
grammar.Context.missingFallbackStatement=\
There are statements but a fall-backs statement is missing.
grammar.Context.multipleAttributesSpecifications=\
There are multiple attributes specifications in the context {1} and {0}.
grammar.Context.multipleDocumentationSpecifications=\
There are multiple documentation specifications in the context {1} and {0}.
grammar.ContextOp.invalidImportName=\
Invalid import name {0} when referencing from context {1} of grammar {2}.
grammar.Context.noPrimaryLevelInExpressions=\
Non abstract context {0} has operators but does not have a primary level.
grammar.Block.referringContextWithoutStatements=\
The block is referring context {0} without statements..
grammar.Expression.invalidPrecedence=\
Precedence {0} is invalid.
grammar.Expression.noValidExpression=\
No valid expressions are defined in context when referencing context {0} from context {1} of grammar {2}.
grammar.Modifiers.invalidStatement=\
The statement is not allowed in modifier set.
grammar.ObjectDefinition.misplacedLet=\
This let statement appears at top level in the definition {0} when referencing \
from context {1} of grammar {2}. But that kind of definition cannot contain \
let at top level.
grammar.ObjectDefinition.missingTopObject=\
This let statement missing a required top level object when is referenced \
from context {0} of grammar {1}.
grammar.ObjectDefinition.missingRightProperty=\
Operation is missing right property definition.
grammar.ObjectDefinition.missingLeftProperty=\
Operation is missing left property definition.
grammar.ObjectDefinition.duplicateTopObject=\
This object expression appears at top level in the definition {0} when referencing \
from context {1} of grammar {2}. But that definition already have top object \
let at top level.
grammar.ObjectDefinition.noDefaultGrammar=\
An implicit object creation expression is forced and no default namespace is defined \
in the grammar {2} that contains the original definition {0} in the context {1}.
grammar.ObjectName.undefinedPrefix=\
Prefix {0} is undefined in this grammar.
grammar.Operand.duplicateRightOperand=\
This is second definition of right operand for this operator
grammar.Operand.duplicateLeftOperand=\
This is second definition of left operand for this operator
grammar.Operand.misplacedOperand=\
Operand expression (left or right) should not occur in this context.
grammar.Operand.leftNotAllowed=\
Left operand declaration is not allowed in operators with associativity {0}
grammar.Operand.rightNotAllowed=\
Right operand declaration is not allowed in operators with associativity {0}
grammar.OperatorDefinition.composite.operatorTextPresent=\
Operator definition must not have text.
grammar.OperatorDefinition.nonObjectTopLevel=\
Operator definition must contain object at top level.
grammar.OperatorDefinition.invalidTopLevelStatement=\
Only blank statements and object expression statements are allowed at top level.
grammar.OperatorDefinition.missingTopObject=\
There are no top object in this operator and no default namespace is declared.
grammar.OperatorDefinition.simple.operatorTextMissed=\
Missed operator text for non-composite operator.
grammar.Ref.danglingRef=\
Ref with name {0} cannot be resolved.
grammar.Ref.cyclicRef=\
Referenced definition directly or indirectly references itself {0} \
in context {1} of grammar {2}.
grammar.SimpleOp.compositeSyntax=\
Composite syntax is not allowed in simple operator definition.
grammar.String.invalidQuote=\
Specified quote {0} is invalid.
grammar.SyntaxDefinition.choiceConflict=\
A definition has alternatives that conflict with each other. Gathered \
look ahead {0}, but new alternative has look ahead = {1}.
grammar.Wrapper.undefinedWrapperPrefix=\
Prefix {0} of is undefined in the grammar.
grammar.Def.cyclicDefinition=\
The definition directly or indirectly references itself in context {0} of grammar {1}.
grammar.Context.cyclicContext=\
The context directly or indirectly references itself in context {0} of grammar {1}.
grammar.ParseError=\
Unable to parse grammar with id {0} due to unexpected problem: {1}
grammar.EmptyGrammar=\
The grammar with system id {0} is empty.
grammar.TooManyGrammars=\
The grammar with system id {0} is contains more than one grammar.
grammar.AbstractRootGrammar=\
The grammar with systemId {0} specified as root, is abstract \
and cannot be instantiated.
grammar.GrammarRef.systemIdParseError=\
Unable to parse system id {0} in grammar reference.
grammar.NumberOp.invalidSuffix=\
Specified suffix {0} is invalid.
grammar.Modifiers.firstChoiceEmptyFirst=\
The first alternative in first choice node matches empty sequence. \
The second alternative is unreachable.
grammar.Number.tooBig=\
The number is too big.
grammar.Context.missingCaseForChoice=\
The context {0} is missing cases for choice {1} defined at {2}
grammar.Context.missingChoiceForCase=\
In the context {0} the choice {1} is missing for {2} cases including case {3} defined at {4}
